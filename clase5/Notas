
POO
- Utilizar el parametro que le paso a la funcion para cambiar de estado el boton de login


Componentes:

1) Siempre primer letra mayuscula
2) No se puede repetir nombre del componente en un mismo archivo
3) Los componentes son funciones 
4) Los componentes deben retornar algo siempre
5) Los componentes solo devuelven una sola cosa
6) Puede recibit props
7) Pueden tener un estado interno
8) Si el estado de un componente o sus props cambian de valor, el componente se vuelve a renderizar (se reejecuta toda la funcion)


DESTRUCTURING:
- Guardas valores de un array en constantes
const arr = [1,2,3]
const [uno,dos,tres] =arr

Lo que es equivalente a hacer
const uno = arr[0]
const dos = arr[1]
const tres = arr[2]

- Guardas valores de un objeto en constantes
const obj = {a:1,b:2,c:3}
const {a:uno,b:dos,c:tres} = obj

Lo que es equivalente a hacer
const uno = obj.a
const dos = obj.b
const tres = obj.c

OBJECT PROPERTY SHORTHAND:
{a:a} = {a}
const {a,b,c} = obj

- EVENTOS
const btn = document.getElementById("btn")
btn.addEventListener("click",Funcion callback)

Por ejemplo
const Footer = ()=>{}
btn.addEventListener("click",Footer) Le paso la funcion
btn.addEventListener("click",Footer()) Le paso el resultado de la funcion

STATE: Son variantes internas de un componente que se mantienen a travez de ejecucion y nos dan reactividad

HOOKS: Son funciones que se ejecutan en un componente y le dan una nueva funcionalidad

    Hooks de estado:
        - useState()
        - useReducer()
        - useRef()
